// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that recommends the nearest hospitals to the user that match their requirements.
 *
 * - recommendHospitals - A function that handles the hospital recommendation process.
 * - RecommendHospitalsInput - The input type for the recommendHospitals function.
 * - RecommendHospitalsOutput - The return type for the recommendHospitals function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendHospitalsInputSchema = z.object({
  medicalRequirements: z
    .string()
    .describe('The medical requirements of the patient.'),
  location: z.string().describe('The current location of the patient.'),
});
export type RecommendHospitalsInput = z.infer<typeof RecommendHospitalsInputSchema>;

const RecommendHospitalsOutputSchema = z.object({
  hospitals: z
    .array(z.string())
    .describe('A list of recommended hospitals based on the patient requirements and location.'),
});
export type RecommendHospitalsOutput = z.infer<typeof RecommendHospitalsOutputSchema>;

export async function recommendHospitals(input: RecommendHospitalsInput): Promise<RecommendHospitalsOutput> {
  return recommendHospitalsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'recommendHospitalsPrompt',
  input: {schema: RecommendHospitalsInputSchema},
  output: {schema: RecommendHospitalsOutputSchema},
  prompt: `You are a medical assistant that recommends hospitals to patients.

  Based on the patient's medical requirements and location, recommend the nearest hospitals to the user.

  Patient Medical Requirements: {{{medicalRequirements}}}
  Patient Location: {{{location}}}

  Only return the hospitals in a JSON array of strings.
  Example: ["Hospital A", "Hospital B", "Hospital C"]`,
});

const recommendHospitalsFlow = ai.defineFlow(
  {
    name: 'recommendHospitalsFlow',
    inputSchema: RecommendHospitalsInputSchema,
    outputSchema: RecommendHospitalsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
